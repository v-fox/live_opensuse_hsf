#
# please add local extensions to this file
#

# Intel broken backdoor that fails anyway on some X79 motherboards
blacklist mei_me

# 'eeeprom' and/or 'at24' are needed to test memory with `decode-dimms`
options at24 io_limit=2097152 write_timeout=128

# for nouveau power management which usually is broken
options nouveau runpm=1 atomic=1

# Intel GPUs
options i915 panel_ignore_lid=0 error_capture=1 enable_guc=-1 enable_dpcd_backlight=1 enable_gvt=1

# AMD GPU tweaks
# power-managements settings are: 'dpm', 'runpm', 'aspm' and 'bapm'. PM support is very flimsy and is the main reason for driver failure
# 2M pages and bigger queue to accomodate hugepages of system's RAM and boost compute performance. also, prefer 'amdgpu' driver over 'radeon'
# 'vm_size' needs to be at least RAM+VRAM, default is RAMx3
# what is optimal value for 'sched_hw_submission' ? default is 2, setting â‰¥2048 on RX580 results in soft-hang, 1024 seems safe. 16 might be a sweetspot with 128 "jobs" ?
# and what is safe preemption timeout ? same as for kernel's RCU ? and use prime numbers too ? 97ms that should fit 6 frames at 60 fps ? 1/2/3/5/7, 11/13/17, 29/31/37/41 to fit only 1/2, 1 or 2 frames ?
# sdma_phase_quantum most likely should not be overridden from default 32. it's, supposedly, is as long as 1/<GPU_clock>*<X>*1000, lower values may decrease latency and downside of that is unknown
# https://bugs.freedesktop.org/show_bug.cgi?id=102322#c15
# on old AMD CPUs with 'pci=big_root_window' in kernel options makes BAR=VRAM, so 'vm_update_mode' turns to '2' ("use CPU for compute-only") from '0' ("never") and may lead to hangs,
# '3' forces "CPU VM updates" for both compute and rendering which guarantees hangs if there is something wrong in the kernel module due to being untested by devs
# on Intel CPUs and AMD Ryzen & up it may always be BAR=VRAM. too small default 'gartsize' also may lead to hangs, 1GB should be safe for 8GB VRAM
# https://lists.freedesktop.org/archives/amd-gfx/2017-August/012344.html
options radeon cik_support=0 si_support=0 msi=1 disp_priority=2 runpm=1 dynclks=1 auxch=1 mst=1 uvd=1 vce=1 vm_size=16 deep_color=1
options amdgpu cik_support=1 si_support=1 msi=1 disp_priority=2 lbpw=1 compute_multipipe=1 vm_fragment_size=9 gartsize=1024 hws_max_conc_proc=8 sched_policy=1 sched_hw_submission=16 sched_jobs=256 max_num_of_queues_per_device=32768 queue_preemption_timeout_ms=21 sdma_phase_quantum=16 mcbp=1 mes=1 job_hang_limit=19000 send_sigterm=1 vm_fault_stop=0 gpu_recovery=1 ras_enable=1 lockup_timeout=9999,29000,19000,4900 discovery=1 deep_color=1 exp_hw_support=1

# avoid polling (0), which may be better for realtime scheduling, in favour of NMI (1) ?
options amd64_edac_mod edac_op_state=0
options sb_edac edac_op_state=0
options skx_edac edac_op_state=0
options i7core_edac edac_op_state=0 use_pci_fixup=1
options x38_edac edac_op_state=0
options pnd2_edac edac_op_state=0
options i82975x_edac edac_op_state=0

# USB core, most likely built-in and have to be configured in bootloader
# autosuspend=-1 to disable power-saving that either never works at all or switches off devices during their work
# usbfs_memory_mb=X to increase buffer size from measly default of 16MB, it's capped to 2G system-wide and hungry high I/O devices may easily want 256-1024MB (https://libusb-devel.narkive.com/EJweu22S/question-usbfs-limits)
# usbfs_snoop=1 previously logged debug info into dmesg but now requires 'usbmon' kernel module and 'usbmon' userspace program
# authorized_default=1 use_both_schemes=1 old_scheme_first=0 - some authorization nonsense for "security masturbation"
options usbcore usbfs_memory_mb=1024 autosuspend=-1 authorized_default=1 use_both_schemes=1 old_scheme_first=0

# force USB mices and "joysticks" to use fastest polling rate because for some unexplaiend reason they don't, "gamer" keyboards are also 1000hz:
# 'kbpoll=1 mousepoll=1 jspoll=1'
# https://wiki.archlinux.org/index.php/mouse_polling_rate
# however, some USB controllers may misbehave
options usbhid kbpoll=1 mousepoll=1 jspoll=1

# on boards where USB3 controller also controls pre-USB3 ports, such as Intel C60x/X79 Xeon boards,
# ohci (USB1) and ehci (USB2) drivers may mess everything up and cause constant device resets
# but it may be more practical to put this into bootloader config, so it can be changed before boot
# and doing this on wrong board will leave you without a keyboard
#blacklist ohci-pci
#blacklist ehci-pci

# maybe power-saving with 'enable_autosuspend=1' isn't such a bad idea for USB BT. and it may also need forcifull 'reset=1'
options btusb enable_autosuspend=0 reset=1
options bluetooth enable_ecred=1

# ALSA hacks
# "contiguous DMA" buffer instead of "vmallock/slab" for USB DACs ?
# https://patchwork.kernel.org/patch/10433547/
options snd-usb-audio use_vmalloc=0 enable=1 index=0,1,2,3,4,5
# https://bugs.launchpad.net/ubuntu/+source/alsa-driver/+bug/1181721
# bdl_pos_adj=48,48,48 position_fix=0 ?
options snd-hda-intel enable_msi=1 align_buffer_size=1 index=10,11,12,14,15
# we don't want squeaker to overshadow real sound chips
options snd-pcsp nopcm=1 index=30 enable=1
# but we do want bless it with special capabilities
#blacklist pcspkr
# or not, since its semi-broken and unmaintained
blacklist snd-pcsp

# measures has to be takes to make all WiFi shit interrupts and disrupt multimedia performance less
# ath9k completely fails with use_chanctx=1 and almost unusable with use_msi=1
options ath9k nohwcrypt=0 btcoex_enable=1 bt_ant_diversity=1 ps_enable=1
